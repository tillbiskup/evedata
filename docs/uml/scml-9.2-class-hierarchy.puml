@startuml

class SCML {
    location : string
    version : string
    scan : Scan
    plugins : Plugin[]
    detectors : Detector[]
    motors : Motor[]
    devices : Monitor[]
}
SCML *-- Scan
SCML *-- "n" Plugin
SCML *-- "n" Detector
SCML *-- "n" Motor
SCML *-- "n" Monitor

class Scan {
    repeatcount : nonNegativeInteger
    comment : string
    savefilename : string
    confirmsave : boolean
    autonumber : boolean
    savescandescription : boolean
    saveplugin : Controller
    MonitorOptions : MonitorOptions
    startevent : Event
    redoevent : Event[]
    breakevent : Event[]
    stopevent : Event[]
    pauseconditions : PauseCondition[]
    scanmodules : ScanModule[]
}
Scan *-- Controller
Scan *-- "n" ScanModule
Scan *-- "n" PauseCondition
Scan *-- "n" Event
Scan *-- MonitorOptions

class Device {
    class : string
    name : string
    id : string
    Unit : Unit
}
Device <|-- Detector
Device <|-- Motor
Device <|-- Monitor
Device <|-- Axis
Device <|-- Channel
Device <|-- Option
Device *-- Unit

class ScanModule {
    name : string
    xpos : nonNegativeInteger
    ypos : nonNegativeInteger
    parent : integer
    nested : positiveInteger
    appended : positiveInteger
    id : positiveInteger
}
ScanModule <|-- ClassicScanModule
ScanModule <|-- SaveAxisPositionsScanModule
ScanModule <|-- SaveChannelValuesScanModule
ScanModule <|-- DynamicAxisPositionsScanModule
ScanModule <|-- DynamicChannelValuesScanModule

class Access {
    value : typevalue
    method : Method
    count : positiveInteger
    transport : Transport
    timeout : double
    monitor : boolean
}
Access <|-- Unit
Access *-- Method
Access *-- Transport

enum AutoAcquire {
    snapshot
    measurement
    no
}

class Axis {
    goto : Access
    position : Access
    stop : Access
    highlimit : Access
    lowlimit : Access
    limitviolation : Access
    status : Access
    movedone : Access
    trigger : Access
    deadband : Access
    offset : Access
    tweakvalue : Access
    tweakforward : Access
    tweakreverse : Access
    option : Option[]
    save_value : boolean
}
Axis *-- "n" Access
Axis *-- "n" Option

enum AxisModifier {
    NONE
    INVERSE
}

class Channel {
    read : Access
    trigger : Access
    stop : Access
    status : Access
    option : Option[]
    deferred : boolean
    save_value : boolean
}
Channel *-- "n" Access
Channel *-- "n" Option

enum Comparison {
    eq
    ne
    gt
    lt
}

class Controller {
    parameter : Parameter[]
    name : string
}
Controller *-- "n" Parameter

class Detector {
    trigger : Access
    stop : Access
    status : Access
    channel : Channel[]
    option : Option[]
}
Detector *-- "n" Access
Detector *-- "n" Channel
Detector *-- "n" Option

class Monitor {
    value : Access
    displaygroup : string
    option : Option[]
}
Monitor *-- Access
Monitor *-- "n" Option

class PauseCondition {
    deviceid : string
    id : integer
    pauselimit : typevalue
}
PauseCondition <|-- EqualityCondition
PauseCondition <|-- InequalityCondition

class EqualityCondition {
    operator : Equality
}
EqualityCondition *-- Equality

enum Equality {
    eq
    ne
}

enum Incident {
    Start
    End
}

class InequalityCondition {
    operator : Inequality
    continuelimit : typevalue
}
InequalityCondition *-- Inequality

enum Inequality {
    gt
    lt
}

class IntervalChannel {
    triggerinterval : double
    stoppedby : string
}

class Limit {
    value : typevalue
    comparison : Comparison
}
Limit *-- Comparison

enum Method {
    PUT
    PUTCB
    GET
    GETCB
    GETPUT
    GETPUTCB
}

class MonitorOptions {
    id : string[]
    type : string
}

class Motor {
    trigger : Access
    axis : Axis[]
    option : Option[]
}
Motor *-- Access
Motor *-- "n" Axis
Motor *-- "n" Option

class Option {
    value : Access
    displaygroup : string
    monitor : boolean
    autoacquire : AutoAcquire
}
Option *-- Access
Option *- AutoAcquire

class Parameter {
    value : string
    name : string
}

class Plot {
    name : string
    xaxis : XAxis
    init : boolean
    yaxis : YAxis[]
    id : positiveInteger
}
Plot *-- XAxis
Plot *-- "n" YAxis

class PlotAxis {
    id : string
    mode : PlotMode
}
PlotAxis <|-- XAxis
PlotAxis <|-- YAxis
PlotAxis *-- PlotMode

class XAxis {
}

class YAxis {
    modifier : AxisModifier
    normalize_id : string
    linestyle : string
    color : string
    markstyle : string
}
YAxis *-- AxisModifier

enum PlotMode {
    linear
    log
}

together {
    class Plugin
    class PluginParameter
    class PluginData
    class PluginType
}

class Plugin {
    name : string
    location : string
    parameter : PluginParameter[]
    type : PluginType
}
Plugin *-- "n" PluginParameter
Plugin *-- PluginType

enum PluginType {
    position
    save
    display
    postscanpositioning
}

enum PluginData {
    int
    double
    string
    axis_id
    channel_id
    device_id
}

class PluginParameter {
    value : string
    name : string
    datatype : PluginData
    default : string
    mandatory : boolean
}
PluginParameter *-- PluginData

class Positioning {
    axis_id : string
    channel_id : string
    normalize_id : string
    plugin : Controller
}
Positioning *-- Controller

class ClassicScanModule {
    valuecount : positiveInteger
    settletime : double
    triggerdelay : double
    triggerconfirmaxis : boolean
    triggerconfirmchannel : boolean
    triggerevent : Event[]
    redoevent : Event[]
    breakevent : Event[]
    prescan : PreScan[]
    scanmoduleaxis : ScanModuleAxis[]
    scanmodulechannel : ScanModuleChannel[]
    postscan : PostScan[]
    positioning : Positioning[]
    plot : Plot[]
}
ClassicScanModule *-- "n" Event
ClassicScanModule *-- "n" PreScan
ClassicScanModule *-- "n" ScanModuleAxis
ClassicScanModule *-- "n" ScanModuleChannel
ClassicScanModule *-- "n" PostScan
ClassicScanModule *-- "n" Positioning
ClassicScanModule *-- "n" Plot

class PreScan {
    id : string
    value : typevalue
}

class PostScan {
    id : string
    value : typevalue
    reset_originalvalue : boolean
}

class DynamicAxisPositionsScanModule {
}

class DynamicChannelValuesScanModule {
}

class SaveAxisPositionsScanModule {
    scanmoduleaxis : ScanModuleAxis[]
}
SaveAxisPositionsScanModule *-- "n" ScanModuleAxis

class SaveChannelValuesScanModule {
    scanmodulechannel : ScanModuleChannel[]
}
SaveChannelValuesScanModule *-- "n" ScanModuleChannel

class ScanModuleAxis {
    axisid : string
    stepfunction : StepFunction
    positionmode : PositionMode
    startstopstep : StartStopStep
    stepfilename : string
    plugin : Controller
    positionlist : string
    range : StepFunctionRange
}
ScanModuleAxis *-- StepFunction
ScanModuleAxis *-- PositionMode
ScanModuleAxis *-- StartStopStep
ScanModuleAxis *-- Controller
ScanModuleAxis *-- StepFunctionRange

enum PositionMode {
    relative
    absolute
}

class ScanModuleChannel {
    channelid : string
    normalize_id : string
    redoevent : Event[]
    deferredtrigger : boolean
}
ScanModuleChannel <|-- StandardChannel
ScanModuleChannel <|-- IntervalChannel
ScanModuleChannel *-- "n" Event

class Event {
}
Event <|-- DetectorEvent
Event <|-- MonitorEvent
Event <|-- ScheduleEvent

class DetectorEvent {
    id : string
}

class MonitorEvent {
    id : string
    limit : Limit
}
MonitorEvent *-- Limit

class ScheduleEvent {
    incident : Incident
    scanmodule_id : integer
}
ScheduleEvent *-- Incident

class StandardChannel {
    averagecount : nonNegativeInteger
    maxdeviation : double
    minimum : double
    maxattempts : nonNegativeInteger
    sendreadyevent : boolean
}

class StartStopStep {
    start : typevalue
    stop : typevalue
    stepwidth : typevalue
    ismainaxis : boolean
}

enum StepFunction {
    Add
    Multiply
    File
    Plugin
    Positionlist
    Range
}

class StepFunctionRange {
    expression : string
    positionlist : string
}

enum Transport {
    ca
    local
}

class Unit {
    unitstring : string
}

@enduml
