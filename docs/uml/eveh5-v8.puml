@startuml
'https://plantuml.com/class-diagram

legend top left
    **eveH5 schema v8** <U+2014> not yet released, complete overhaul

    G: HDF5 groups; D: HDF5 datasets; <color:#firebrick><U+2610></color>: optional attributes
    Dataset columns appear below the attributes.
    Dataset names in angle brackets <> are replaced with actual names in an eveH5 file.
    'Name parts in square brackets [] are optional.
endlegend

class Root << (G,orchid) >> {
    EVEH5Version : string
    EVEVersion : string
    MeasurementStation : string
    EngineHost : string
    EngineUser : string
    EnginePort : int
    {field} Start : string (YYYY-MM-DDThh:mm:ss)
    {field} End : string (YYYY-MM-DDThh:mm:ss)
    Description : string
    Comment : string
    Simulation : int | "boolean" enum
}


Root *-- main
Root *-- snapshot
Root *-- meta

pre_postscan -[hidden]> positioning
positioning -[hidden]> meta

enum DeviceType {
    NonnumericChannel
    SinglePointChannel
    AverageChannel
    IntervalChannel
    ArrayChannel
    AreaChannel
    Axis
    AxisWithEncoder
    Device
    Option
}
note right of DeviceType
    This enum class may not be present
    in the actual HDF5 file, but it contains
    the controlled vocabulary for the
    DeviceType attribute of the datasets.

    This string gets used to map the datasets
    to the corresponding classes, and it
    corresponds to the overall data model.
endnote

enum DetectorType {
}
note left of DetectorType
    This enum class may not be present
    in the actual HDF5 file, but it contains
    the controlled vocabulary for the
    DetectorType attribute of the datasets.

    Valid entries need to be decided upon,
    but ideally they allow for sensible
    handling of the data in downstream
    packages.
endnote

class main << (G,orchid) >> {}

class "<scanmodule_id>" << (G,orchid) >> {
    Name: string
    ID: int32
    Parent: int32
    Appended: int32
    Nested: int32
    NumberOfMeasurements: int32
    - PreferredAxis : string
    - PreferredChannel : string
    - PreferredNormalizationChannel : string
}

class snapshot << (G,orchid) >> {}

note left of snapshot
    The ""snapshot"" group contains only datasets
    with scalar "values" per individual Position.
    This means that no average or interval channels
    will appear here, and additionally neither
    array nor area channels.
endnote

snapshot *-- "<axisdata>"
snapshot *-- "<singlepointdata>"

class meta << (G,orchid) >> {}

meta *-- Scan
meta *-- Station
meta *-- Positions2Milliseconds
meta *-- LogMessages
meta *-- ErrorMessages
Station -[hidden]> Scan

'main -[hidden]> snapshot

class positioning << (G,orchid) >> {}

positioning *-- "<positioningdata>"

class "<positioningdata>" << (D,orange) >> {
    Name : string
    XMLID : string
    --
    Positions : int32
    Data : float64
    Function : string
    ChannelID : string
    NormalizeID : string
    Parameters : <any>
}
note bottom of "<positioningdata>"
    The dataset has the same name
    as the corresponding axis dataset.
end note

class pre_postscan << (G,orchid) >> {}

pre_postscan *-- "<devicedata>"

class "<devicedata>" << (D,orange) >> {
    PV : string
    AccessMode : string
    Name : string
    XMLID : string
    DeviceType : string
    --
    Positions : int32
    Data : <any>
}


class "<axisdata>" << (D,orange) >> {
    PV : string
    AccessMode : string
    Name : string
    XMLID : string
    DeviceType : string
    - Unit : string
    --
    Positions : int32
    Data : <any>
}
note bottom of "<axisdata>"
    For axes with encoders,
    RBV will be saved synchronised
    with each detector channel
    readout, and in this case,
    for average channels
    individual RBV per channel
    readout will be stored
    for one and the same position.

    Axes may have nonnumeric values.
end note

class "<singlepointdata>" << (D,orange) >> {
    PV : string
    AccessMode : string
    Name : string
    XMLID : string
    DeviceType : string
    DetectorType : string
    Unit : string
    - NormalizeID : string
    --
    Positions : int32
    Data : float64
    - NormalizedData : float64
    - NormalizingData : float64
}

main *-- "<scanmodule_id>"

"<scanmodule_id>" *-- positioning
"<scanmodule_id>" *-- pre_postscan

"<scanmodule_id>" *-- "<axisdata>"
"<scanmodule_id>" *-- "<singlepointdata>"
"<scanmodule_id>" *-- "<averagedata>"
"<scanmodule_id>" *-- "<intervaldata>"
"<scanmodule_id>" *-- "<mcadata>"
"<scanmodule_id>" *-- "<samplecameradata>"
"<scanmodule_id>" *-- "<scientificcameradata>"

"<axisdata>" -[hidden]> "<singlepointdata>"
"<singlepointdata>" -[hidden]> "<averagedata>"
"<averagedata>" -[hidden]> "<intervaldata>"
"<intervaldata>" -[hidden]> "<mcadata>"
"<mcadata>" -[hidden]> "<samplecameradata>"
"<samplecameradata>" -[hidden]> "<scientificcameradata>"

class "<averagedata>" << (D,orange) >> {
    PV : string
    AccessMode : string
    Name : string
    XMLID : string
    DeviceType : string
    DetectorType : string
    Unit : string
    Averages : int32
    - NormalizeID : string
    - MaxAttempts : int32
    - MaxDeviation : float64
    - LowLimit : float64
    --
    Positions : int32
    Data : float64
    RawData : vlen_float64
    Preset : int32
    - Attempts : int32
    - NormalizedData : vlen_float64
    - NormalizingData : vlen_float64
}

class "<intervaldata>" << (D,orange) >> {
    PV : string
    AccessMode : string
    Name : string
    XMLID : string
    DeviceType : string
    DetectorType : string
    Unit : string
    - NormalizeID : string
    TriggerInterval : float64
    StoppedBy : string
    --
    Positions : int32
    Data : float64
    RawData : vlen_float64
    Count : int32
    StandardDeviation : float64
    - NormalizedData : vlen_float64
    - NormalizingData : vlen_float64
}

class "<mcadata>" << (G,orchid) >> {}

"<mcadata>" *-- mca_data
"<mcadata>" *-- "0..n" "mca_roi<#>"

class "mca_data" << (D,orange) >> {
    PV : string
    AccessMode : string
    Name : string
    XMLID : string
    DeviceType : string
    DetectorType : string
    Unit : string
    -CalO : float64
    -CalS : float64
    -CalQ : float64
    --
    Positions : int32
    Data : array
    LifeTime : float64
    RealTime : float64
}

class "mca_roi<#>" << (D,orange) >> {
    Label : string
    Marker : [int32, int32]
    --
    Counts : float64
}

class "<samplecameradata>" << (D,orange) >> {
    PV : string
    AccessMode : string
    Name : string
    XMLID : string
    DeviceType : string
    DetectorType : string
    Unit : string
    BeamX : int32
    BeamY : int32
    - FileType : string
    --
    Positions : int32
    Data : array | string
}

class "<scientificcameradata>" << (G,orchid) >> {}

"<scientificcameradata>" *-- scientificcamera_data
"<scientificcameradata>" *-- "0..n" "scientificcamera_roi<#>"
"<scientificcameradata>" *-- "0..n" "scientificcamera_statistics<#>"

class scientificcamera_data << (D,orange) >> {
    PV : string
    AccessMode : string
    Name : string
    XMLID : string
    DeviceType : string
    DetectorType : string
    Unit : string
    Gain : float64
    ReverseX : "boolean"
    ReverseY : "boolean"
    - FileType : string
    --
    Positions : int32
    Data : array | string
    AcquireTime : float64
    Temperature : float64 | array
    Humidity : float64 | array
}

note bottom of scientificcamera_data
    The "FileType" attribute will contain the relevant
    information on the file type of external files, in case
    the actual data are stored external to the HDF5 file.
    The string needs to be a controlled vocabulary understood
    by the importing routines and is set in the defining XML.
endnote

class "scientificcamera_roi<#>" << (D,orange) >> {
    Label : String
    Marker : [int32, int32, int32, int32]
    --
}

class "scientificcamera_statistics<#>" << (D,orange) >> {
    BackgroundWidth : int32
    CentroidThreshold : float64
    --
    MinValue : float64
    MinX : float64
    MinY : float64
    MaxValue : float64
    MaxX : float64
    MaxY : float64
    Mean : float64
    Total : float64
    Net : float64
    Sigma : float64
    CentroidX : float64
    CentroidY : float64
    CentroidSigmaX : float64
    CentroidSigmaY : float64
    CentroidSigmaXY : float64
}

class Station << (D,orange) >> {
    Version : string
    Filename : string
    --
    XML : string
}

note as scientificcamera_note
    ROI and statistics need to be separated,
    as depending on the camera settings,
    different statistics are mapped to diffferent ROIs,
    and the number of ROIs and statistics needs not be
    the same (there can be statistics for the entire image).
endnote

"scientificcamera_roi<#>" .. scientificcamera_note
"scientificcamera_statistics<#>" .. scientificcamera_note


class Scan << (D,orange) >> {
    Version : string
    Filename : string
    Author : string
    --
    XML : string
}

class LogMessages << (D,orange) >> <<optional>> {
    --
    Timestamp : string
    Source : string
    Severity : string
    Message : vlen_string
}

class ErrorMessages << (D,orange) >> <<optional>> {
    --
    Positions : int32
    DeviceID : string
    Severity : string
    State : string
}

class Positions2Milliseconds << (D,orange) >> {
    Unit : string
    --
    Positions : int32
    Milliseconds : int32
}

LogMessages -[hidden]> ErrorMessages
ErrorMessages -[hidden]> Positions2Milliseconds
Positions2Milliseconds -[hidden]> Station
Station -[hidden]> Scan

snapshot -[hidden]> main
main -[hidden]> meta

note as SCML_note
    XML should be a fixed_length string
    and the dataset compressed,
    to save (a lot of) space.
    Tests have revealed compression
    by about 95% for real XML data.
    Not naming the data field results
    in proper display of the XML
    in HDFView, including line breaks,
    and regardless of compression.
end note

Scan .. SCML_note
Station .. SCML_note

@enduml