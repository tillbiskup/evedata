@startuml
'https://plantuml.com/class-diagram

legend top left
    **eveH5 schema v8** <U+2014> not yet released, complete overhaul

    G: HDF5 groups; D: HDF5 datasets; <color:#firebrick><U+2610></color>: optional attributes
    Dataset columns appear below the attributes.
    Dataset names in angle brackets <> are replaced with actual names in an eveH5 file.
    'Name parts in square brackets [] are optional.
endlegend

class Root << (G,orchid) >> {
    EVEH5Version : string
    EVEVersion : string
    Location : string
    Start : string
    End : string
    Comment : string
    Simulation : string
    - PreferredAxis : string
    - PreferredChannel : string
    - PreferredNormalizationChannel : string
}

Root *-- monitor
Root *-- main
Root *-- snapshot
Root *-- meta

class monitor << (G,orchid) >> <<optional>> {
}

monitor *-- "<monitordata>"

class main << (G,orchid) >> {}

class snapshot << (G,orchid) >> <<optional>> {}

note left of snapshot
    The ""snapshot"" group contains only datasets
    with scalar values per individual PositionCount.
    This means that no average or interval channels
    will appear here, but perhaps array or area channels.
endnote

snapshot *-- "<data>"
snapshot *.. "<arraydata>"
snapshot *.. "<areadata>"

class meta << (G,orchid) >> {}

meta *-- PositionCountTime
meta *-- Scan
meta *-- Setup
meta *-- LogMessages

class "<data>" << (D,orange) >> {
    Access : string
    Name : string
    XMLID : string
    DeviceType : string
    - DetectorType : string
    - Unit : string
    - NormalizeId : string
    --
    PositionCount : int32
    Values : <i>any</i>
    - NormalizedValues : <i>any</i>
    - NormalizingValues : <i>any</i>
}

main *-- "<data>"
main *-- "<averagedata>_sm<#>"
main *-- "<intervaldata>_sm<#>"
main *-- "<arraydata>"
main *-- "<areadata>"

class "<averagedata>_sm<#>" << (D,orange) >> {
    Access : string
    Name : string
    XMLID : string
    DeviceType : string
    DetectorType : string
    Unit : string
    Averages : int32
    - NormalizeId : string
    - MaxAttempts : int32
    - MaxDeviation : float64
    - LowLimit : float64
    --
    PositionCount : int32
    Values : float64
    RawValues : vlen_float64
    Preset : int32
    - Attempts : int32
    - NormalizedValues : vlen_float64
    - NormalizingValues : vlen_float64
}

class "<intervaldata>_sm<#>" << (D,orange) >> {
    Access : string
    Name : string
    XMLID : string
    DeviceType : string
    DetectorType : string
    Unit : string
    - NormalizeId : string
    TriggerInterval : float64
    --
    PositionCount : int32
    Values : float64
    RawValues : vlen_float64
    Count : int32
    StandardDeviation : float64
    - NormalizedValues : vlen_float64
    - NormalizingValues : vlen_float64
}

note as sm_channel_note
    As (only) these two types of channels can change
    for individual scan modules, they are generally
    saved with the ""sm<#>"" prefix, where ""<#>"" denotes
    the scan module ID, <i>i.e.</i> an integer value.
end note

"<intervaldata>_sm<#>" .. sm_channel_note
"<averagedata>_sm<#>" .. sm_channel_note

class "<arraydata>" << (D,orange) >> {
    Access : string
    Name : string
    XMLID : string
    DeviceType : string
    DetectorType : string
    Unit : string
    --
    PositionCount : int32
    Values : array
}

class "<areadata>" << (D,orange) >> {
    Access : string
    Name : string
    XMLID : string
    DeviceType : string
    DetectorType : string
    Unit : string
    --
    PositionCount : int32
    Values : array | string
}

class Setup << (D,orange) >> {
    Version : string
    Filename : string
    --
    XML : string
}

class Scan << (D,orange) >> {
    Version : string
    Filename : string
    Author : string
    --
    XML : string
}

class PositionCountTime << (D,orange) >> {
    Unit : string
    --
    PositionCount : int32
    Time : int32
}

class LogMessages << (D,orange) >> <<optional>> {
    --
    Timestamp : string
    Message : vlen_string
}

note as SCML_note
    XML should be a fixed_length string
    and the dataset compressed, to save
    (a lot of) space.
    Tests have revealed compression by
    about 95% for real XML data.
end note

Scan .. SCML_note
Setup .. SCML_note

class "<monitordata>" << (D,orange) >> {
    Access : string
    Name : string
    XMLID : string
    - Unit : string
    --
    Time : int32
    Values : <i>any</i>
}

@enduml