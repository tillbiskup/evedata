@startuml
'https://plantuml.com/class-diagram

legend top left
    **eveH5 schema v8** <U+2014> not yet released, complete overhaul

    G: HDF5 groups; D: HDF5 datasets; <color:#firebrick><U+2610></color>: optional attributes
    Dataset columns appear below the attributes.
    Dataset names in angle brackets <> are replaced with actual names in an eveH5 file.
    'Name parts in square brackets [] are optional.
endlegend

class Root << (G,orchid) >> {
    EVEH5Version : string
    EVEVersion : string
    Location : string
    Start : string
    End : string
    Comment : string
    Simulation : string
    - PreferredAxis : string
    - PreferredChannel : string
    - PreferredNormalizationChannel : string
}

Root *-- monitor
Root *-- main
Root *-- snapshot
Root *-- meta

class monitor << (G,orchid) >> <<optional>> {
}

monitor *-- "<monitordata>"

class main << (G,orchid) >> {}

class snapshot << (G,orchid) >> <<optional>> {}

note left of snapshot
    The ""snapshot"" group contains only datasets
    with scalar "values" per individual Position.
    "Data", however, can be 0D..2D per Position.
    This means that no average or interval channels
    will appear here, but perhaps array or area channels.
endnote

snapshot *-- "<singlepointdata>"
snapshot *.. "<arraydata>"
snapshot *.. "<areadata>"

class meta << (G,orchid) >> {}

meta *-- Positions2Milliseconds
meta *-- Scan
meta *-- Setup
meta *-- LogMessages

class "<singlepointdata>" << (D,orange) >> {
    Access : string
    Name : string
    XMLID : string
    DeviceType : string
    - DetectorType : string
    - Unit : string
    - NormalizeId : string
    --
    Positions : int32
    Data : <i>any</i>
    - NormalizedData : <i>any</i>
    - NormalizingData : <i>any</i>
}

main *-- "<singlepointdata>"
main *-- "<averagedata>_sm<#>"
main *-- "<intervaldata>_sm<#>"
main *-- "<arraydata>"
main *-- "<areadata>"

class "<averagedata>_sm<#>" << (D,orange) >> {
    Access : string
    Name : string
    XMLID : string
    DeviceType : string
    DetectorType : string
    Unit : string
    Averages : int32
    - NormalizeId : string
    - MaxAttempts : int32
    - MaxDeviation : float64
    - LowLimit : float64
    --
    Positions : int32
    Data : float64
    RawData : vlen_float64
    Preset : int32
    - Attempts : int32
    - NormalizedData : vlen_float64
    - NormalizingData : vlen_float64
}

class "<intervaldata>_sm<#>" << (D,orange) >> {
    Access : string
    Name : string
    XMLID : string
    DeviceType : string
    DetectorType : string
    Unit : string
    - NormalizeId : string
    TriggerInterval : float64
    --
    Positions : int32
    Data : float64
    RawData : vlen_float64
    Count : int32
    StandardDeviation : float64
    - NormalizedData : vlen_float64
    - NormalizingData : vlen_float64
}

note as sm_channel_note
    As (only) these two types of channels can change
    for individual scan modules, they are generally
    saved with the ""sm<#>"" prefix, where ""<#>"" denotes
    the scan module ID, <i>i.e.</i> a positive integer value.
end note

"<intervaldata>_sm<#>" .. sm_channel_note
"<averagedata>_sm<#>" .. sm_channel_note

class "<arraydata>" << (D,orange) >> {
    Access : string
    Name : string
    XMLID : string
    DeviceType : string
    DetectorType : string
    Unit : string
    --
    Positions : int32
    Data : array
}

class "<areadata>" << (D,orange) >> {
    Access : string
    Name : string
    XMLID : string
    DeviceType : string
    DetectorType : string
    Unit : string
    --
    Positions : int32
    Data : array | string
}

class Setup << (D,orange) >> {
    Version : string
    Filename : string
    --
    XML : string
}

class Scan << (D,orange) >> {
    Version : string
    Filename : string
    Author : string
    --
    XML : string
}

class Positions2Milliseconds << (D,orange) >> {
    Unit : string
    --
    Positions : int32
    Milliseconds : int32
}

class LogMessages << (D,orange) >> <<optional>> {
    --
    Timestamp : string
    Message : vlen_string
}

note as SCML_note
    XML should be a fixed_length string and the dataset compressed,
    to save (a lot of) space.
    Tests have revealed compression by about 95% for real XML data.
    Not naming the data field results in proper display of the XML
    in HDFView, including line breaks, and regardless of compression.
end note

Scan .. SCML_note
Setup .. SCML_note

class "<monitordata>" << (D,orange) >> {
    Access : string
    Name : string
    XMLID : string
    - Unit : string
    --
    Milliseconds : int32
    Data : <i>any</i>
}

@enduml