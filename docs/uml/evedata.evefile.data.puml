@startuml
'skinparam dpi 150

class Data {
    metadata : Metadata
    values : np.ndarray
}
note left of Data::values
    "values" contains a 1D array.
    For individual values see derived classes
    AverageDetectorData and
    IntervalDetectorData
end note

class Metadata {
}
note bottom: See separate diagram\nfor class hierarchy

class MeasureData {
    {field} position_counter : np.ndarray(dtype=int)
}

class MonitorData {
    {field} milliseconds : np.ndarray(dtype=int)
}

class MotorData {
}

class DetectorData {
}

class TimestampData {
}

class ScanModuleData {
}
note bottom
    The corresponding dataset in the
    eveH5 file does not exist yet.

    The idea is to store the id of the
    scan module for each position count.
end note

class AverageDetectorData {
    raw_values : raggedarray
    {field} attempts : np.ndarray(dtype=int)
    mean()
    std()
    averaged_values()
    has_raw_values()
}
note bottom: How does mean() differ\nfrom values in Data?
note bottom of AverageDetectorData: averaged_values() returns only\nthose values used to average over

class IntervalDetectorData {
    raw_values : raggedarray
    {field} counts : np.ndarray(dtype=int)
    mean()
    std()
    has_raw_values()
}

Data *-- Metadata
Data <|-- MeasureData
Data <|-- MonitorData
MeasureData <|-- MotorData
MeasureData <|-- DetectorData
MeasureData <|-- TimestampData
MeasureData <|-- ScanModuleData
DetectorData <|-- AverageDetectorData
DetectorData <|-- IntervalDetectorData

@enduml
